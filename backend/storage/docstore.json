{"docstore/metadata": {"323ded51-deab-4dbc-aa2e-c2b7044752e9": {"doc_hash": "c651d7de6bf5abd0b4aa4c978089970a4784454b0f6e9ecbf5dea51759f6aaee"}, "0bb4e7da-9ffd-45fe-abe9-65737f495b90": {"doc_hash": "f3855d3e9304f2fc93d40760f89d32c5c9d7c7ea9288f25c658d51cae7af90b4"}, "bb97eb83-b984-4816-b466-b317844bac47": {"doc_hash": "bb48a5a944ee9fdacf16f28a37223c07e1726c3ce5dc5fe0df8ad6d7fd2dae52"}, "ba3c78e6-b496-4c43-b814-87bed98c6b8e": {"doc_hash": "9907dbbe08ac4f961874dcf449132e95dda10d81e8ee75ac07c282d22e2d4e1f"}, "0f35651c-6e44-49c3-9840-abbeedf8ef9d": {"doc_hash": "fbab10f23f9f9cd69454b102f2ff6071260f18765fed2f87772177ff3e9ff827"}, "77375ba8-f242-416e-891e-ffc340ef306c": {"doc_hash": "0aac4756858d0c713993472a2c38512773943c03051a8ed684195137a5f36203"}, "e6831b85-c69f-458e-a7c5-2f9dd55ff3a5": {"doc_hash": "8c0a1dafa990eb25d437606f992e43a7e446222af501688dcd4a23f56639eb0f"}, "47773f87-932c-4a5f-9329-85c79573aec0": {"doc_hash": "9a50197b7fdc655d984ce1991dc0b38d751c47c2fa1311a11101854912447af0"}, "e1b4e2b8-db09-4faf-93a8-6ef2114100e9": {"doc_hash": "676455d0327b85e15e19a89289e423d2594b962b06f545212dfbd5889b772920"}, "5dc5a74c-5b7d-45b0-827a-d6203f8bf2fb": {"doc_hash": "c566ce499b6a3a2ad377fce80d787edbea426a04d8da7927ace61e96623b2b17"}, "991e4a5c-1a90-453b-a344-557650ecddcf": {"doc_hash": "f518764b1a70150aa6db0e1d9f719a7aac18ea4d260fb6f94911456f58dc8a60"}, "6c85ba42-29a0-4558-a896-9d8defc3f419": {"doc_hash": "7a7a802fa77dedc19df329a57ef182c0b369a9b5a41b7e3143dd8604586c263b"}, "83d7c78c-fe83-4d9f-8878-d3d169542d20": {"doc_hash": "82e207fa8589dd336de23d2060210c381c5b24d2bdce870d6cda3b7c4ce38859"}, "1b0bfedc-41e1-4692-9d69-b2aed66895ab": {"doc_hash": "af46407a17fc9d38cfc9792522e588096d1e276c63a1428c474ace646ae11fb3"}, "1aad107c-7c7e-45b2-8ef0-171962a53df3": {"doc_hash": "7861e476f5768c7e3e4822cf56c43c2b6a880561373fdfd558c74823490c335b"}, "19777680-d5e4-46f3-bb17-fc057692ae11": {"doc_hash": "3fe1674882cb50c8f8c9a995d08e834cd3d1a57f825a20c7fdf92cfa9dee7b01"}, "476aeb80-2f80-4329-aaf0-16cda12105fb": {"doc_hash": "30e830eaf2e0a06288a33f3927cb3e97df0024942eefe62e5633481c9bbd3047"}, "9e27a9d5-7dfa-4ab7-afbd-eaab5cb91eb1": {"doc_hash": "c5c43f896c1f98fddfdbf3fed38d9dccf868493779692f1448f2edef403114b1"}, "607f2875-fb90-47a8-b104-92249c0d1fbf": {"doc_hash": "029f14609614cdbff90479058a4f9e3cbd6765383e85f9092df6138bd5a90a36"}, "6ab9539a-673c-4798-bc21-6c8bfed24da9": {"doc_hash": "7ed7e991b5c378837835a6519053aab10aff463dc7bd387f00beb19f0502b981"}, "594936c1-f49a-40c3-95a0-ef8ea505b66b": {"doc_hash": "9adbc3389857a3d870d2f03c15c562c27a0ccca717e377fe7bd5026dd5d21372"}, "405fb025-f043-4450-ae53-a5b49de2cd5c": {"doc_hash": "d811768ba9a68a02699ae6502e84f2fc63af01a63670f5dedb9899433c5886c1"}, "c1413f8c-9c74-4739-889f-fa3df74ceeb8": {"doc_hash": "fb52dcbc78f96f2246be8c1b00edd3d703f0ace8a822a6e07a8c62ee116a7e4f"}, "f85bb871-2196-4226-8833-b02bee265739": {"doc_hash": "0c616747dfa0e1b882ab8c6d698cef97bedd5c4e9b6fdbefddf554c9314698bd"}, "aeeb5c6d-2e50-425a-b1af-564751177234": {"doc_hash": "34893b35e2095403c52dc873ecad92908eb03fac0c858640ec5ca2b36f1d2dae"}, "1dab281e-e2ad-401a-9169-a524ee42b564": {"doc_hash": "7adf1a14a96175895b9e1e32106806051b381c486142e24654dfb03e47dedc97"}, "7d4045db-39fb-4736-ac5c-666ba39d14ec": {"doc_hash": "f056194a801d543e3e898c513c869b33ac7f66fe6f5f94c2f5daf67754434925"}, "8f5a5a42-2a35-49db-b4ee-9ecfeddfe241": {"doc_hash": "5f4b03087c1ac51364aa6099cb9acd82d1225d3325f8a0eb143514a9f5e8b559"}, "37b4789c-46db-4367-88a2-b16ea858f8b2": {"doc_hash": "c29def80712027be11dea5bed39cda1f69563b4cc279e5c9f8cebbc25fc4c50e"}, "511867cd-1057-4ae3-9ef5-146fd068557b": {"doc_hash": "9ef2416951be2085b0cd242730601da83ebe4900410c7bc46cd423c0024135ec"}, "64227685-209a-400b-b7b3-6df52f6f3550": {"doc_hash": "5e446e9312cfad8e3aaa47bc4bfceff146cb9cb70467dfa7f76382982750cb52"}, "76df151d-43b8-4c95-bcfc-85c58b126042": {"doc_hash": "e5766369b7055dfcd313457f1497d0f06ad88f89d6fe13c4a2a8e1d0f5c099b2"}, "a2be9667-6006-4319-a607-82e3edb0cfb1": {"doc_hash": "eb4e4505e48da1a7816a90f861dcdb7524c80c098afcb901d981a422a6d9a290"}, "d004380e-3a9b-45dc-96e8-1b5461aa3f84": {"doc_hash": "cd74939f4329585a1ae391a7bd151048a15b7f4b06f32eb3101acaa0242acbe1"}, "727c5382-6db6-482d-9c91-271f42e435d9": {"doc_hash": "3446cb4c3d8524cff184469fc382f18a9b99edafefc83a4d8ffb3d59baf3c0a4"}, "61e29c05-7153-493f-9b7b-f63997680bc8": {"doc_hash": "9907beac009a02fc3418d4d6a624e4520386f785e01af540c355ecf6a94a09f0"}, "4a36f55f-44cc-4b04-b90c-e8e6713b5b41": {"doc_hash": "e4d92e16068a6094d432a6cbfd8abe1fe291c58f0eac941d559d98984cee7b9a"}, "c90a3b25-d3f7-49d5-a84b-793c8eccebd1": {"doc_hash": "82633efb7416a75a92010028a60c33e47c39be6ef80ecbb0441e798d43688fa6"}, "b4d21c1d-0863-4441-9aac-784a686be526": {"doc_hash": "aa99faf5ef253c011342d5f95deacfb21758a462bb832d8071ea16d8dcc889ba"}, "b83b2989-74f1-4138-94a6-12be33c99b8f": {"doc_hash": "6fd28bdfd523091d73d69c998ae76e6a467187dc5de6910858410e9746327787"}, "dc6b7566-0c71-4c3f-b57b-cf1031354647": {"doc_hash": "4481cbe0399c00dc62de910a09b168bf0c229e0225ef61df8a2ccb4669fd161e"}, "75f14b08-eef7-4de7-97ad-891f1f7a10cc": {"doc_hash": "e99b14126dd9e4db79d54dec27ebb7cd7e47322114105dc25fd2c6b42d48283c", "ref_doc_id": "323ded51-deab-4dbc-aa2e-c2b7044752e9"}, "84f65174-9b0f-4bee-8c82-52e56c90f8c3": {"doc_hash": "173ff631ee2482f57ceb927af6b422b76b63b7482a68718237fa3ffa59963ab3", "ref_doc_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90"}, "2bce9355-4b40-43a7-9173-16a3fabfe3ad": {"doc_hash": "7a07910f6f6354dda8a020f0780d9624152a67481c9991b15bf5df4883366d30", "ref_doc_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90"}, "540d10c5-e065-4bf0-a7e3-fb50b2b5f8fe": {"doc_hash": "23771817c995ddd761697a9b8f54479016834a8d224a6c178223350d2866ef22", "ref_doc_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90"}, "476c279e-26bf-44d1-b28e-33ccd1d4b460": {"doc_hash": "fb67ab382b65dccbb991c3ecbed67ce2267285badf151bbb646186ede5cb9a11", "ref_doc_id": "bb97eb83-b984-4816-b466-b317844bac47"}, "15eb41ef-6101-41a5-8f68-3d6921f6a975": {"doc_hash": "755790e0f1c213823ee52b842b9559e9ef4c1962d35bb2fe13afe45270089f9e", "ref_doc_id": "ba3c78e6-b496-4c43-b814-87bed98c6b8e"}, "855641c8-ab01-43a7-b664-4f404a63b327": {"doc_hash": "0e1a026051cfc45031e630910cfbd2e655c27cd8c6781f45d8664a90601c79e8", "ref_doc_id": "0f35651c-6e44-49c3-9840-abbeedf8ef9d"}, "3615bd98-4326-414e-83e1-65726f89c278": {"doc_hash": "633d9b37b916eef2a91cdebd23535a0ff3e4cfeec3abf4c166ea44122ba3a570", "ref_doc_id": "77375ba8-f242-416e-891e-ffc340ef306c"}, "41bbb5dd-9e8f-40c6-b75a-afe1ad694bcc": {"doc_hash": "b00f0e81d64f9382ff3600e085af78aa1d5e0b6652ae9dbf0d260957600e6a51", "ref_doc_id": "e6831b85-c69f-458e-a7c5-2f9dd55ff3a5"}, "b24d522a-18f1-4661-b57a-23c685834436": {"doc_hash": "3843785059eb49b55318b0c4f4f9ead0061a679cca005d5da0fc8eb2f329855e", "ref_doc_id": "47773f87-932c-4a5f-9329-85c79573aec0"}, "3cc9942d-4d24-43da-a024-b3530c28e2c9": {"doc_hash": "e1336e0adfa5bbbcfe990fac24d4510004aafb2bb278851c13b5666331c2a16c", "ref_doc_id": "e1b4e2b8-db09-4faf-93a8-6ef2114100e9"}, "9e7cc5d3-d1e0-4dfe-a43b-036e6d1cbd7c": {"doc_hash": "8d31cc488a6fe2a55a0d639612ca2ac6205ef24495aec2fd6263017782666b75", "ref_doc_id": "5dc5a74c-5b7d-45b0-827a-d6203f8bf2fb"}, "a18306fd-2d50-424c-80e0-b920372dbd04": {"doc_hash": "918aa4302792d72da6d2fa7b0eb90d688471bfadcdf36cf91c39b508a9107bfd", "ref_doc_id": "991e4a5c-1a90-453b-a344-557650ecddcf"}, "48df718d-be0d-4d04-be1b-40962a2c2853": {"doc_hash": "972bac9dad4770790e2c34a19fffb6875fdc4d20f95129a7618e2f15474a9072", "ref_doc_id": "6c85ba42-29a0-4558-a896-9d8defc3f419"}, "647f9cf1-4b82-473e-ba76-3e0c6756cf48": {"doc_hash": "e0df3100b1b702ffa749ae192542aaaf7a89df5bbd4480433a5ba9526cfe8e27", "ref_doc_id": "83d7c78c-fe83-4d9f-8878-d3d169542d20"}, "a4f9f89b-bbfc-479a-91e9-ede46a65fe1c": {"doc_hash": "4ff5d798aa111b08a5dfe8af64f22ad9f1e7070c47ef5ebde308b26d21fb3da3", "ref_doc_id": "1b0bfedc-41e1-4692-9d69-b2aed66895ab"}, "a6634de3-e4d1-442e-a211-dcc0271f8e3e": {"doc_hash": "392919d847134ec91f33763a31444dbc9a9cefb91b911c75f01e921330590557", "ref_doc_id": "1aad107c-7c7e-45b2-8ef0-171962a53df3"}, "50a1ac41-d8ed-4210-9701-86bc4bc7c60c": {"doc_hash": "1fc510f37d55384d8c7ea731cfa6ea518c52f13d7b5708c198082ecd5f5615f6", "ref_doc_id": "19777680-d5e4-46f3-bb17-fc057692ae11"}, "6ed78359-741b-4ae4-9534-ee7c3fc6804c": {"doc_hash": "2c4eb8cbc5acb19c91260f413467f0d28425cdf2467d5f170fd2b468b4027807", "ref_doc_id": "19777680-d5e4-46f3-bb17-fc057692ae11"}, "4f233ecc-607d-44dc-a1eb-d43189fd6b8d": {"doc_hash": "75b70900e29dfd40aa38b46a9ddde2a2d2625b29f1244c7d534d44dc01b0fced", "ref_doc_id": "19777680-d5e4-46f3-bb17-fc057692ae11"}, "d9e589cc-4f70-45f2-87c6-af4cd9cf896e": {"doc_hash": "606161f5b19ac658b710eadc82e8dd5574192d95005557de2e0514d25aa5bb01", "ref_doc_id": "476aeb80-2f80-4329-aaf0-16cda12105fb"}, "a173ff99-1093-4a20-9525-d2942517d524": {"doc_hash": "b76c050ce8e9e63fbb0c0a24ddc3f0f6fd4038829fbc0e592969f69d00870972", "ref_doc_id": "9e27a9d5-7dfa-4ab7-afbd-eaab5cb91eb1"}, "715a8590-3a78-4045-9369-99c0ddc7002c": {"doc_hash": "55573832e92f6e4e718471d3643b2ae83e0b5d0cdd47182f26edd0f095811ce6", "ref_doc_id": "607f2875-fb90-47a8-b104-92249c0d1fbf"}, "0af66a94-210d-4d33-b54f-a4251a6b81e9": {"doc_hash": "f12c64aa501dd4a465ae2dfc0c16d639b20151cab9b46fe4c0a983c0c85c94df", "ref_doc_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9"}, "abe2d532-b2ce-4c77-9269-a8a6c68c2b28": {"doc_hash": "45d173d8be600074b1ce804a551321eccc75c0af4138cd323ac3b9c0b63b8cd0", "ref_doc_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9"}, "1b092c9f-f071-43c0-ba16-fef0d4c5c304": {"doc_hash": "f8048d7f843834d1444d4bef7ab3c72c249f5deed5c53c62e5f628fbad570312", "ref_doc_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9"}, "2191e6f3-d587-4995-bd0c-3cda7c21857c": {"doc_hash": "69076cb34d5844f53b25da9adbc2ef5c2af4c811de3d0beebf7246376387c948", "ref_doc_id": "594936c1-f49a-40c3-95a0-ef8ea505b66b"}, "e61253fd-6238-420e-b952-76be6077809e": {"doc_hash": "ad800442533642068a0d89cad7d7241abca6f4aa0bfeb8d4e727d56c242b915d", "ref_doc_id": "405fb025-f043-4450-ae53-a5b49de2cd5c"}, "5f07f229-156a-4e83-991a-5fa86e5b1158": {"doc_hash": "fc24d7a0191a4e7e6ca54c6d432c3be903a4ddb86d2b7c16f435e7e449072fac", "ref_doc_id": "c1413f8c-9c74-4739-889f-fa3df74ceeb8"}, "3eeceb73-122d-4f9e-889d-5f9b0f678175": {"doc_hash": "60c28dff62c1e153c37f39eef7df46cead49d3b909205724b5b0bd02942808ce", "ref_doc_id": "f85bb871-2196-4226-8833-b02bee265739"}, "4f2d5f5d-f74b-473d-ad22-c8192807cb5b": {"doc_hash": "0469113ecdd9eeac15cee23e96f27f258435976b177ce047b6dd6752b1eddd12", "ref_doc_id": "aeeb5c6d-2e50-425a-b1af-564751177234"}, "f05234e2-b393-4ac3-ae2b-1ab17f0ba849": {"doc_hash": "d177cbf071094af7de146f517c7f078114ba0242f112736882e6d5c18a30192c", "ref_doc_id": "1dab281e-e2ad-401a-9169-a524ee42b564"}, "556879ef-ffa0-4077-9222-fcade97fc337": {"doc_hash": "1958f35f5f42575ceefd66edadf29fad43140332bff1d57573a41cd4d12770d7", "ref_doc_id": "7d4045db-39fb-4736-ac5c-666ba39d14ec"}, "fab431fd-38a2-466b-8378-5c9cfdc1edfc": {"doc_hash": "b50a6e367944f4a18c9e957f62ca12c442cc61682ed86f921fc0c520c523f612", "ref_doc_id": "8f5a5a42-2a35-49db-b4ee-9ecfeddfe241"}, "8bea883f-d065-419c-94a5-002f6509249e": {"doc_hash": "6d768dff40a50445ba1f2695eb0d7d136c8fcbd6a886738944ad5733a2978ee1", "ref_doc_id": "37b4789c-46db-4367-88a2-b16ea858f8b2"}, "2af314de-b4e9-4f51-bfd0-4730a83c0047": {"doc_hash": "9ca5efc49569d76ec064b76b2a47bf445ddbc666842f185afc4515a55ac051ad", "ref_doc_id": "511867cd-1057-4ae3-9ef5-146fd068557b"}, "995428fd-b614-4d59-ba2e-0b6b767a0afe": {"doc_hash": "adcdd206a1ee790847a1776e27690507dd246a9ea07468bd63a64804e53d3171", "ref_doc_id": "64227685-209a-400b-b7b3-6df52f6f3550"}, "604d7849-86ce-48a1-9249-0a9076a5d5df": {"doc_hash": "5ced05b69a21e0f551124befb6ad212f8d5b37731a59b12c1d6727c22fde53a8", "ref_doc_id": "76df151d-43b8-4c95-bcfc-85c58b126042"}, "d7e973b5-f870-4d6f-b5b1-23f782648907": {"doc_hash": "0aad43b02bf36aedbfff9175f480cef7e9fca40e653cb94bb5961804f28ac2e2", "ref_doc_id": "a2be9667-6006-4319-a607-82e3edb0cfb1"}, "93691cbd-e45e-4381-b54e-30d8719d34e8": {"doc_hash": "1849acaed4e88ab2d66ba39ed2a83c609a5cca8b74cd1d717af6c7864fccab32", "ref_doc_id": "d004380e-3a9b-45dc-96e8-1b5461aa3f84"}, "b7796b8b-8c26-4310-8b15-262c647740c2": {"doc_hash": "92ef81a169f177e4e3746493315a96dafcdeee0bcc43730e10cf25dead78f685", "ref_doc_id": "727c5382-6db6-482d-9c91-271f42e435d9"}, "b4086549-d5e6-412d-839c-573688292734": {"doc_hash": "c7402077c412381957dea62c8d437c6b291653a60954240dc352a0e8a252b2bb", "ref_doc_id": "61e29c05-7153-493f-9b7b-f63997680bc8"}, "bda1cc9f-715f-4f2a-848f-6c10b46e991f": {"doc_hash": "4baa6d13a340b5c98b2025a3becc9db2db9136789857b792a2bb3f8924805394", "ref_doc_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41"}, "9484d082-d873-4700-9416-232bdf45df33": {"doc_hash": "155cf7f8456cb7fba8940ea3eedf4ac6d5c4159e8feba9d93e81deefde1b88f1", "ref_doc_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41"}, "a03c8a44-1bae-4161-b529-0a782ae12fe6": {"doc_hash": "022d0769aa5683a8f8ceaa12b46ed1cff129389969190f6d45eee9657241cc7a", "ref_doc_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41"}, "f65e04b4-3927-45c1-bdf3-660ca38d5a61": {"doc_hash": "91303762067fa91b35b8a3f67db8d8322d6c0cc592bc824551472cdc39639acd", "ref_doc_id": "c90a3b25-d3f7-49d5-a84b-793c8eccebd1"}, "06232635-57a4-401c-9a7a-1ef13765036a": {"doc_hash": "2c7bde3dd9d980f4ef50ffe85c9c59fef5a8165366cefbf4a946d67f3e2f0a03", "ref_doc_id": "b4d21c1d-0863-4441-9aac-784a686be526"}, "fdd4352e-ccc6-43b3-9615-d2434a3c16b7": {"doc_hash": "4a939a05dde3b5ff07f61f11db6e239cb4d8c0ecf9252221b30c6c1c8e4835a0", "ref_doc_id": "b83b2989-74f1-4138-94a6-12be33c99b8f"}, "f388729d-f424-4462-a4f8-9456e55511bd": {"doc_hash": "02b0d1746c5d085de08ddb77b20fb52b957a9fd5bcab59fc6fcd2aad5c7772c4", "ref_doc_id": "dc6b7566-0c71-4c3f-b57b-cf1031354647"}}, "docstore/data": {"75f14b08-eef7-4de7-97ad-891f1f7a10cc": {"__data__": {"id_": "75f14b08-eef7-4de7-97ad-891f1f7a10cc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "323ded51-deab-4dbc-aa2e-c2b7044752e9", "node_type": null, "metadata": {}, "hash": "c651d7de6bf5abd0b4aa4c978089970a4784454b0f6e9ecbf5dea51759f6aaee"}}, "hash": "e99b14126dd9e4db79d54dec27ebb7cd7e47322114105dc25fd2c6b42d48283c", "text": "pragma solidity ^0.4.16;\n\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 {\n    function totalSupply() constant returns (uint totalSupply);\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n    function approve(address _spender, uint _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract RaceCondition{\n    address private owner;\n    uint public price;\n    ERC20 token;\n\n    function RaceCondition(uint _price, ERC20 _token)\n        public \n    {\n        owner = msg.sender;\n        price = _price;\n        token = _token;\n    }\n\n    // If the owner sees someone calls buy\n    // he can call changePrice to set a new price\n    // If his transaction is mined first, he can\n    // receive more tokens than excepted by the new buyer\n    function buy(uint new_price) payable\n        public\n    {\n        require(msg.value >= price);\n\n        // we assume that the RaceCondition contract\n        // has enough allowance\n        token.transferFrom(msg.sender, owner, price);\n\n        price = new_price;\n        owner = msg.sender;\n    }\n\n    function changePrice(uint new_price){\n        require(msg.sender == owner);\n        price = new_price; \n    }\n\n}", "start_char_idx": 0, "end_char_idx": 1588, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "84f65174-9b0f-4bee-8c82-52e56c90f8c3": {"__data__": {"id_": "84f65174-9b0f-4bee-8c82-52e56c90f8c3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90", "node_type": null, "metadata": {}, "hash": "f3855d3e9304f2fc93d40760f89d32c5c9d7c7ea9288f25c658d51cae7af90b4"}, "3": {"node_id": "2bce9355-4b40-43a7-9173-16a3fabfe3ad", "node_type": null, "metadata": {}, "hash": "7a07910f6f6354dda8a020f0780d9624152a67481c9991b15bf5df4883366d30"}}, "hash": "173ff631ee2482f57ceb927af6b422b76b63b7482a68718237fa3ffa59963ab3", "text": "contract theRun {\n        uint private Balance = 0;\n        uint private Payout_id = 0;\n        uint private Last_Payout = 0;\n        uint private WinningPot = 0;\n        uint private Min_multiplier = 1100; //110%\n        \n\n        //Fees are necessary and set very low, to maintain the website. The fees will decrease each time they are collected.\n        //Fees are just here to maintain the website at beginning, and will progressively go to 0% :)\n        uint private fees = 0;\n        uint private feeFrac = 20; //Fraction for fees in per\"thousand\", not percent, so 20 is 2%\n        \n        uint private PotFrac = 30; //For the WinningPot ,30=> 3% are collected. This is fixed.\n        \n        \n        address private admin;\n        \n        function theRun() {\n            admin = msg.sender;\n        }\n\n        modifier onlyowner {if (msg.sender == admin) _;  }\n\n        struct Player {\n            address addr;\n            uint payout;\n            bool paid;\n        }\n\n        Player[] private players;\n\n        //--Fallback function\n        function() {\n            init();\n        }\n\n        //--initiated function\n        function init() private {\n            uint deposit=msg.value;\n            if (msg.value < 500 finney) { //only participation with >1 ether accepted\n                    msg.sender.send(msg.value);\n                    return;\n            }\n            if (msg.value > 20 ether) { //only participation with <20 ether accepted\n                    msg.sender.send(msg.value- (20 ether));\n                    deposit=20 ether;\n            }\n            Participate(deposit);\n        }\n\n        //------- Core of the game----------\n        function Participate(uint deposit) private {\n                //calculate the multiplier to apply to the future payout\n                \n\n                uint total_multiplier=Min_multiplier; //initiate total_multiplier\n                if(Balance < 1 ether && players.length>1){\n                    total_multiplier+=100; // + 10 %\n                }\n                if( (players.length % 10)==0 && players.length>1 ){ //Every 10th participant gets a 10% bonus, play smart !\n         ", "start_char_idx": 0, "end_char_idx": 2152, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2bce9355-4b40-43a7-9173-16a3fabfe3ad": {"__data__": {"id_": "2bce9355-4b40-43a7-9173-16a3fabfe3ad", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90", "node_type": null, "metadata": {}, "hash": "f3855d3e9304f2fc93d40760f89d32c5c9d7c7ea9288f25c658d51cae7af90b4"}, "2": {"node_id": "84f65174-9b0f-4bee-8c82-52e56c90f8c3", "node_type": null, "metadata": {}, "hash": "173ff631ee2482f57ceb927af6b422b76b63b7482a68718237fa3ffa59963ab3"}, "3": {"node_id": "540d10c5-e065-4bf0-a7e3-fb50b2b5f8fe", "node_type": null, "metadata": {}, "hash": "23771817c995ddd761697a9b8f54479016834a8d224a6c178223350d2866ef22"}}, "hash": "7a07910f6f6354dda8a020f0780d9624152a67481c9991b15bf5df4883366d30", "text": "gets a 10% bonus, play smart !\n                    total_multiplier+=100; // + 10 %\n                }\n                \n                //add new player in the queue !\n                players.push(Player(msg.sender, (deposit * total_multiplier) / 1000, false));\n                \n                //--- UPDATING CONTRACT STATS ----\n                WinningPot += (deposit * PotFrac) / 1000; // take some 3% to add for the winning pot !\n                fees += (deposit * feeFrac) / 1000; // collect maintenance fees 2%\n                Balance += (deposit * (1000 - ( feeFrac + PotFrac ))) / 1000; // update balance\n\n                // Winning the Pot :) Condition : paying at least 1 people with deposit > 2 ether and having luck !\n                if(  ( deposit > 1 ether ) && (deposit > players[Payout_id].payout) ){ \n                    uint roll = random(100); //take a random number between 1 & 100\n                    if( roll % 10 == 0 ){ //if lucky : Chances : 1 out of 10 ! \n                        msg.sender.send(WinningPot); // Bravo !\n                        WinningPot=0;\n                    }\n                    \n                }\n                \n                //Classic payout for the participants\n                while ( Balance > players[Payout_id].payout ) {\n                    Last_Payout = players[Payout_id].payout;\n                    players[Payout_id].addr.send(Last_Payout); //pay the man, please !\n                    Balance -= players[Payout_id].payout; //update the balance\n                    players[Payout_id].paid=true;\n                    \n                    Payout_id += 1;\n                }\n        }\n\n\n\n    uint256 constant private salt =  block.timestamp;\n    \n    function random(uint Max) constant private returns (uint256 result){\n        //get the best seed for randomness\n        uint256 x = salt * 100 / Max;\n        uint256 y = salt * block.number / (salt % 5) ;\n        uint256 seed = block.number/3 + (salt % 300) + Last_Payout +y; \n    ", "start_char_idx": 2128, "end_char_idx": 4115, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "540d10c5-e065-4bf0-a7e3-fb50b2b5f8fe": {"__data__": {"id_": "540d10c5-e065-4bf0-a7e3-fb50b2b5f8fe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0bb4e7da-9ffd-45fe-abe9-65737f495b90", "node_type": null, "metadata": {}, "hash": "f3855d3e9304f2fc93d40760f89d32c5c9d7c7ea9288f25c658d51cae7af90b4"}, "2": {"node_id": "2bce9355-4b40-43a7-9173-16a3fabfe3ad", "node_type": null, "metadata": {}, "hash": "7a07910f6f6354dda8a020f0780d9624152a67481c9991b15bf5df4883366d30"}}, "hash": "23771817c995ddd761697a9b8f54479016834a8d224a6c178223350d2866ef22", "text": "+ (salt % 300) + Last_Payout +y; \n        uint256 h = uint256(block.blockhash(seed)); \n    \n        return uint256((h / x)) % Max + 1; //random number between 1 and Max\n    }\n    \n    \n\n    //---Contract management functions\n    function ChangeOwnership(address _owner) onlyowner {\n        admin = _owner;\n    }\n    function WatchBalance() constant returns(uint TotalBalance) {\n        TotalBalance = Balance /  1 wei;\n    }\n    \n    function WatchBalanceInEther() constant returns(uint TotalBalanceInEther) {\n        TotalBalanceInEther = Balance /  1 ether;\n    }\n    \n    \n    //Fee functions for creator\n    function CollectAllFees() onlyowner {\n        if (fees == 0) throw;\n        admin.send(fees);\n        feeFrac-=1;\n        fees = 0;\n    }\n    \n    function GetAndReduceFeesByFraction(uint p) onlyowner {\n        if (fees == 0) feeFrac-=1; //Reduce fees.\n        admin.send(fees / 1000 * p);//send a percent of fees\n        fees -= fees / 1000 * p;\n    }\n        \n\n//---Contract informations\nfunction NextPayout() constant returns(uint NextPayout) {\n    NextPayout = players[Payout_id].payout /  1 wei;\n}\n\nfunction WatchFees() constant returns(uint CollectedFees) {\n    CollectedFees = fees / 1 wei;\n}\n\n\nfunction WatchWinningPot() constant returns(uint WinningPot) {\n    WinningPot = WinningPot / 1 wei;\n}\n\nfunction WatchLastPayout() constant returns(uint payout) {\n    payout = Last_Payout;\n}\n\nfunction Total_of_Players() constant returns(uint NumberOfPlayers) {\n    NumberOfPlayers = players.length;\n}\n\nfunction PlayerInfo(uint id) constant returns(address Address, uint Payout, bool UserPaid) {\n    if (id <= players.length) {\n        Address = players[id].addr;\n        Payout = players[id].payout / 1 wei;\n        UserPaid=players[id].paid;\n    }\n}\n\nfunction PayoutQueueSize() constant returns(uint QueueSize) {\n    QueueSize = players.length - Payout_id;\n}\n\n\n}", "start_char_idx": 4102, "end_char_idx": 5978, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "476c279e-26bf-44d1-b28e-33ccd1d4b460": {"__data__": {"id_": "476c279e-26bf-44d1-b28e-33ccd1d4b460", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bb97eb83-b984-4816-b466-b317844bac47", "node_type": null, "metadata": {}, "hash": "bb48a5a944ee9fdacf16f28a37223c07e1726c3ce5dc5fe0df8ad6d7fd2dae52"}}, "hash": "fb67ab382b65dccbb991c3ecbed67ce2267285badf151bbb646186ede5cb9a11", "text": "# Bad Randomness\n\nPseudorandom number generation on the blockchain is generally unsafe. There are a number of reasons for this, including:\n\n- The blockchain does not provide any cryptographically secure source of randomness. Block hashes in isolation are cryptographically random, however, a malicious miner can modify block headers, introduce additional transactions, and choose not to publish blocks in order to influence the resulting hashes. Therefore, miner-influenced values like block hashes and timestamps should never be used as a source of randomness.\n\n- Everything in a contract is publicly visible. Random numbers cannot be generated or stored in the contract until after all lottery entries have been stored.\n\n- Computers will always be faster than the blockchain. Any number that the contract could generate can potentially be precalculated off-chain before the end of the block.\n\nA common workaround for the lack of on-chain randomness is using a commit and reveal scheme. Here, each user submits the hash of their secret number.\nWhen the time comes for the random number to be generated, each user sends their secret number to the contract\nwhich then verifies it matches the hash submitted earlier and xors them together. Therefore no participant can observe how their contribution\nwill affect the end result until after everyone has already committed to a value. However, this is also vulnerable to DoS attacks,\nsince the last person to reveal can choose to never submit their secret. Even if the contract is allowed to move forward without\neveryone's secrets, this gives them influence over the end result. In general, we do not recommend commit and reveal schemes.\n\n## Attack Scenarios\n\n- A lottery where people bet on whether the hash of the current block is even or odd. A miner that bets on even can throw out blocks whose\nhash are even.\n- A commit-reveal scheme where users don't necessarily have to reveal their secret (to prevent DoS). A user has money riding on the outcome\nof the PRG and submits a large number of commits, allowing them to choose the one they want to reveal at the end.\n\n## Mitigations\n\nThere are currently not any recommended mitigations for this issue.\nDo not build applications that require on-chain randomness.\nIn the future, however, these approaches show promise\n\n- [Verifiable delay functions](https://eprint.iacr.org/2018/601.pdf): functions which produce a pseudorandom number\nand take a fixed amount of sequential time to evaluate\n- [Randao](https://github.com/randao/randao): A commit reveal scheme where users must stake wei to participate\n\n## Examples\n\n- The `random` function in [theRun](theRun_source_code/theRun.sol) was vulnerable to this attack. It used the blockhash, timestamp and block number to generate numbers in a range to determine winners of the lottery. To exploit this, an attacker could set up a smart contract that generates numbers in the same way and submits entries when it would win. As well, the miner of the block has some control over the blockhash and timestamp and would also be able to influence the lottery in their favor.\n\n## Sources\n\n- https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract\n- https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620", "start_char_idx": 0, "end_char_idx": 3332, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "15eb41ef-6101-41a5-8f68-3d6921f6a975": {"__data__": {"id_": "15eb41ef-6101-41a5-8f68-3d6921f6a975", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ba3c78e6-b496-4c43-b814-87bed98c6b8e", "node_type": null, "metadata": {}, "hash": "9907dbbe08ac4f961874dcf449132e95dda10d81e8ee75ac07c282d22e2d4e1f"}}, "hash": "755790e0f1c213823ee52b842b9559e9ef4c1962d35bb2fe13afe45270089f9e", "text": "Denial of Service\n\nA malicious contract can permanently stall another contract by failing\nin a strategic way. In particular, contracts that bulk perform transactions or updates using\na `for` loop can be DoS'd if a call to another contract or `transfer` fails during the loop.", "start_char_idx": 0, "end_char_idx": 275, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "855641c8-ab01-43a7-b664-4f404a63b327": {"__data__": {"id_": "855641c8-ab01-43a7-b664-4f404a63b327", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0f35651c-6e44-49c3-9840-abbeedf8ef9d", "node_type": null, "metadata": {}, "hash": "fbab10f23f9f9cd69454b102f2ff6071260f18765fed2f87772177ff3e9ff827"}}, "hash": "0e1a026051cfc45031e630910cfbd2e655c27cd8c6781f45d8664a90601c79e8", "text": "Attack Scenarios\n\n- Auction contract where frontrunner must be reimbursed when they are outbid. If the call refunding\nthe frontrunner continuously fails, the auction is stalled and they become the de facto winner.\n\n- Contract iterates through an array to pay back its users. If one `transfer` fails in the middle of a `for` loop\nall reimbursements fail.\n\n- Attacker spams contract, causing some array to become large. Then `for` loops iterating through the array \nmight run out of gas and revert.", "start_char_idx": 0, "end_char_idx": 496, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3615bd98-4326-414e-83e1-65726f89c278": {"__data__": {"id_": "3615bd98-4326-414e-83e1-65726f89c278", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "77375ba8-f242-416e-891e-ffc340ef306c", "node_type": null, "metadata": {}, "hash": "0aac4756858d0c713993472a2c38512773943c03051a8ed684195137a5f36203"}}, "hash": "633d9b37b916eef2a91cdebd23535a0ff3e4cfeec3abf4c166ea44122ba3a570", "text": "Examples\n\n- Both insecure and secure versions of the auction contract mentioned above\n\n- Bulk refund functionality that is suceptible to DoS, and a secure version", "start_char_idx": 0, "end_char_idx": 162, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "41bbb5dd-9e8f-40c6-b75a-afe1ad694bcc": {"__data__": {"id_": "41bbb5dd-9e8f-40c6-b75a-afe1ad694bcc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e6831b85-c69f-458e-a7c5-2f9dd55ff3a5", "node_type": null, "metadata": {}, "hash": "8c0a1dafa990eb25d437606f992e43a7e446222af501688dcd4a23f56639eb0f"}}, "hash": "b00f0e81d64f9382ff3600e085af78aa1d5e0b6652ae9dbf0d260957600e6a51", "text": "Mitigations\n\n- Favor pull over push for external calls\n- If iterating over a dynamically sized data structure, be able to handle the case where the function\ntakes multiple blocks to execute. One strategy for this is storing iterator in a private variable and\nusing `while` loop that exists when gas drops below certain threshold.", "start_char_idx": 0, "end_char_idx": 329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b24d522a-18f1-4661-b57a-23c685834436": {"__data__": {"id_": "b24d522a-18f1-4661-b57a-23c685834436", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47773f87-932c-4a5f-9329-85c79573aec0", "node_type": null, "metadata": {}, "hash": "9a50197b7fdc655d984ce1991dc0b38d751c47c2fa1311a11101854912447af0"}}, "hash": "3843785059eb49b55318b0c4f4f9ead0061a679cca005d5da0fc8eb2f329855e", "text": "References\n\n- https://www.reddit.com/r/ethereum/comments/4ghzhv/governmentals_1100_eth_jackpot_payout_is_stuck/\n- https://github.com/ConsenSys/smart-contract-best-practices#dos-with-unexpected-revert\n- https://vessenes.com/ethereum-griefing-wallets-send-w-throw-considered-harmful/", "start_char_idx": 0, "end_char_idx": 281, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3cc9942d-4d24-43da-a024-b3530c28e2c9": {"__data__": {"id_": "3cc9942d-4d24-43da-a024-b3530c28e2c9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e1b4e2b8-db09-4faf-93a8-6ef2114100e9", "node_type": null, "metadata": {}, "hash": "676455d0327b85e15e19a89289e423d2594b962b06f545212dfbd5889b772920"}}, "hash": "e1336e0adfa5bbbcfe990fac24d4510004aafb2bb278851c13b5666331c2a16c", "text": "pragma solidity ^0.4.15;\n\n//Auction susceptible to DoS attack\ncontract DosAuction {\n  address currentFrontrunner;\n  uint currentBid;\n\n  //Takes in bid, refunding the frontrunner if they are outbid\n  function bid() payable {\n    require(msg.value > currentBid);\n\n    //If the refund fails, the entire transaction reverts.\n    //Therefore a frontrunner who always fails will win\n    if (currentFrontrunner != 0) {\n      //E.g. if recipients fallback function is just revert()\n      require(currentFrontrunner.send(currentBid));\n    }\n\n    currentFrontrunner = msg.sender;\n    currentBid         = msg.value;\n  }\n}\n\n\n//Secure auction that cannot be DoS'd\ncontract SecureAuction {\n  address currentFrontrunner;\n  uint    currentBid;\n  //Store refunds in mapping to avoid DoS\n  mapping(address => uint) refunds;\n\n  //Avoids \"pushing\" balance to users favoring \"pull\" architecture\n  function bid() payable external {\n    require(msg.value > currentBid);\n\n    if (currentFrontrunner != 0) {\n      refunds[currentFrontrunner] += currentBid;\n    }\n\n    currentFrontrunner = msg.sender;\n    currentBid         = msg.value;\n  }\n\n  //Allows users to get their refund from auction\n  function withdraw() external {\n    //Do all state manipulation before external call to\n    //avoid reentrancy attack\n    uint refund = refunds[msg.sender];\n    refunds[msg.sender] = 0;\n\n    msg.sender.send(refund);\n  }\n}", "start_char_idx": 0, "end_char_idx": 1390, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9e7cc5d3-d1e0-4dfe-a43b-036e6d1cbd7c": {"__data__": {"id_": "9e7cc5d3-d1e0-4dfe-a43b-036e6d1cbd7c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5dc5a74c-5b7d-45b0-827a-d6203f8bf2fb", "node_type": null, "metadata": {}, "hash": "c566ce499b6a3a2ad377fce80d787edbea426a04d8da7927ace61e96623b2b17"}}, "hash": "8d31cc488a6fe2a55a0d639612ca2ac6205ef24495aec2fd6263017782666b75", "text": "pragma solidity ^0.4.15;\n\ncontract CrowdFundBad {\n  address[] private refundAddresses;\n  mapping(address => uint) public refundAmount;\n\n  function refundDos() public {\n    for(uint i; i < refundAddresses.length; i++) {\n      require(refundAddresses[i].transfer(refundAmount[refundAddresses[i]]));\n    }\n  }\n}\n\ncontract CrowdFundPull {\n  address[] private refundAddresses;\n  mapping(address => uint) public refundAmount;\n\n  function withdraw() external {\n    uint refund = refundAmount[msg.sender];\n    refundAmount[msg.sender] = 0;\n    msg.sender.transfer(refund);\n  }\n}\n\n\n//This is safe against the list length causing out of gas issues\n//but is not safe against the payee causing the execution to revert\ncontract CrowdFundSafe {\n  address[] private refundAddresses;\n  mapping(address => uint) public refundAmount;\n  uint256 nextIdx;\n  \n  function refundSafe() public {\n    uint256 i = nextIdx;\n    while(i < refundAddresses.length && msg.gas > 200000) {\n      refundAddresses[i].transfer(refundAmount[i]);\n      i++;\n    }\n    nextIdx = i;\n  }\n}", "start_char_idx": 0, "end_char_idx": 1047, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a18306fd-2d50-424c-80e0-b920372dbd04": {"__data__": {"id_": "a18306fd-2d50-424c-80e0-b920372dbd04", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "991e4a5c-1a90-453b-a344-557650ecddcf", "node_type": null, "metadata": {}, "hash": "f518764b1a70150aa6db0e1d9f719a7aac18ea4d260fb6f94911456f58dc8a60"}}, "hash": "918aa4302792d72da6d2fa7b0eb90d688471bfadcdf36cf91c39b508a9107bfd", "text": "Contracts can be forced to receive ether\n\nIn certain circunstances, contracts can be forced to receive ether without triggering any code. This should be considered by the contract developers in order to avoid breaking important invariants in their code.", "start_char_idx": 0, "end_char_idx": 253, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48df718d-be0d-4d04-be1b-40962a2c2853": {"__data__": {"id_": "48df718d-be0d-4d04-be1b-40962a2c2853", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6c85ba42-29a0-4558-a896-9d8defc3f419", "node_type": null, "metadata": {}, "hash": "7a7a802fa77dedc19df329a57ef182c0b369a9b5a41b7e3143dd8604586c263b"}}, "hash": "972bac9dad4770790e2c34a19fffb6875fdc4d20f95129a7618e2f15474a9072", "text": "Attack Scenario\n\nAn attacker can use a specially crafted contract to forceful send ether using `suicide` / `selfdestruct`:\n\n```solidity\ncontract Sender {\n  function receive_and_suicide(address target) payable {\n    suicide(target);\n  }\n}\n```", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "647f9cf1-4b82-473e-ba76-3e0c6756cf48": {"__data__": {"id_": "647f9cf1-4b82-473e-ba76-3e0c6756cf48", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "83d7c78c-fe83-4d9f-8878-d3d169542d20", "node_type": null, "metadata": {}, "hash": "82e207fa8589dd336de23d2060210c381c5b24d2bdce870d6cda3b7c4ce38859"}}, "hash": "e0df3100b1b702ffa749ae192542aaaf7a89df5bbd4480433a5ba9526cfe8e27", "text": "Example\n\n- The MyAdvancedToken contract in coin.sol is vulnerable to this attack. It will stop the owner to perform the migration of the contract.", "start_char_idx": 0, "end_char_idx": 146, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a4f9f89b-bbfc-479a-91e9-ede46a65fe1c": {"__data__": {"id_": "a4f9f89b-bbfc-479a-91e9-ede46a65fe1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1b0bfedc-41e1-4692-9d69-b2aed66895ab", "node_type": null, "metadata": {}, "hash": "af46407a17fc9d38cfc9792522e588096d1e276c63a1428c474ace646ae11fb3"}}, "hash": "4ff5d798aa111b08a5dfe8af64f22ad9f1e7070c47ef5ebde308b26d21fb3da3", "text": "Mitigations\n\nThere is no way to block the reception of ether. The only mitigation is to avoid assuming how the balance of the contract\nincreases and implement checks to handle this type of edge cases.", "start_char_idx": 0, "end_char_idx": 200, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a6634de3-e4d1-442e-a211-dcc0271f8e3e": {"__data__": {"id_": "a6634de3-e4d1-442e-a211-dcc0271f8e3e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1aad107c-7c7e-45b2-8ef0-171962a53df3", "node_type": null, "metadata": {}, "hash": "7861e476f5768c7e3e4822cf56c43c2b6a880561373fdfd558c74823490c335b"}}, "hash": "392919d847134ec91f33763a31444dbc9a9cefb91b911c75f01e921330590557", "text": "References\n\n- https://solidity.readthedocs.io/en/develop/security-considerations.html#sending-and-receiving-ether", "start_char_idx": 0, "end_char_idx": 113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "50a1ac41-d8ed-4210-9701-86bc4bc7c60c": {"__data__": {"id_": "50a1ac41-d8ed-4210-9701-86bc4bc7c60c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19777680-d5e4-46f3-bb17-fc057692ae11", "node_type": null, "metadata": {}, "hash": "3fe1674882cb50c8f8c9a995d08e834cd3d1a57f825a20c7fdf92cfa9dee7b01"}, "3": {"node_id": "6ed78359-741b-4ae4-9534-ee7c3fc6804c", "node_type": null, "metadata": {}, "hash": "2c4eb8cbc5acb19c91260f413467f0d28425cdf2467d5f170fd2b468b4027807"}}, "hash": "1fc510f37d55384d8c7ea731cfa6ea518c52f13d7b5708c198082ecd5f5615f6", "text": "// taken from https://www.ethereum.org/token#the-coin (4/9/2018)\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. \n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n  ", "start_char_idx": 0, "end_char_idx": 2687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6ed78359-741b-4ae4-9534-ee7c3fc6804c": {"__data__": {"id_": "6ed78359-741b-4ae4-9534-ee7c3fc6804c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19777680-d5e4-46f3-bb17-fc057692ae11", "node_type": null, "metadata": {}, "hash": "3fe1674882cb50c8f8c9a995d08e834cd3d1a57f825a20c7fdf92cfa9dee7b01"}, "2": {"node_id": "50a1ac41-d8ed-4210-9701-86bc4bc7c60c", "node_type": null, "metadata": {}, "hash": "1fc510f37d55384d8c7ea731cfa6ea518c52f13d7b5708c198082ecd5f5615f6"}, "3": {"node_id": "4f233ecc-607d-44dc-a1eb-d43189fd6b8d", "node_type": null, "metadata": {}, "hash": "75b70900e29dfd40aa38b46a9ddde2a2d2625b29f1244c7d534d44dc01b0fced"}}, "hash": "2c4eb8cbc5acb19c91260f413467f0d28425cdf2467d5f170fd2b468b4027807", "text": "tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract", "start_char_idx": 2657, "end_char_idx": 5376, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4f233ecc-607d-44dc-a1eb-d43189fd6b8d": {"__data__": {"id_": "4f233ecc-607d-44dc-a1eb-d43189fd6b8d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19777680-d5e4-46f3-bb17-fc057692ae11", "node_type": null, "metadata": {}, "hash": "3fe1674882cb50c8f8c9a995d08e834cd3d1a57f825a20c7fdf92cfa9dee7b01"}, "2": {"node_id": "6ed78359-741b-4ae4-9534-ee7c3fc6804c", "node_type": null, "metadata": {}, "hash": "2c4eb8cbc5acb19c91260f413467f0d28425cdf2467d5f170fd2b468b4027807"}}, "hash": "75b70900e29dfd40aa38b46a9ddde2a2d2625b29f1244c7d534d44dc01b0fced", "text": "public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address.\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = msg.value;                          // calculates the amount\n\tbalanceOf[msg.sender] += amount;                  // updates the balance\n        totalSupply += amount;                            // updates the total supply\n        _transfer(address(0x0), msg.sender, amount);      // makes the transfer\n    }\n\n    /* Migration function */\n    function migrate_and_destroy() onlyOwner {\n\tassert(this.balance == totalSupply);                 // consistency check                                    \n\tsuicide(owner);                                      // transfer the ether to the owner and kill the contract\n    }\n}", "start_char_idx": 5335, "end_char_idx": 6901, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d9e589cc-4f70-45f2-87c6-af4cd9cf896e": {"__data__": {"id_": "d9e589cc-4f70-45f2-87c6-af4cd9cf896e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "476aeb80-2f80-4329-aaf0-16cda12105fb", "node_type": null, "metadata": {}, "hash": "30e830eaf2e0a06288a33f3927cb3e97df0024942eefe62e5633481c9bbd3047"}}, "hash": "606161f5b19ac658b710eadc82e8dd5574192d95005557de2e0514d25aa5bb01", "text": "Incorrect interface\nA contract interface defines functions with a different type signature than the implementation, causing two different method id's to be created.\nAs a result, when the interfact is called, the fallback method will be executed.", "start_char_idx": 0, "end_char_idx": 245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a173ff99-1093-4a20-9525-d2942517d524": {"__data__": {"id_": "a173ff99-1093-4a20-9525-d2942517d524", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9e27a9d5-7dfa-4ab7-afbd-eaab5cb91eb1", "node_type": null, "metadata": {}, "hash": "c5c43f896c1f98fddfdbf3fed38d9dccf868493779692f1448f2edef403114b1"}}, "hash": "b76c050ce8e9e63fbb0c0a24ddc3f0f6fd4038829fbc0e592969f69d00870972", "text": "Attack Scenario\n\n- The interface is incorrectly defined. `Alice.set(uint)` takes an `uint` in `Bob.sol` but `Alice.set(int)` a `int` in `Alice.sol`. The two interfaces will produce two differents method IDs. As a result, Bob will call the fallback function of Alice rather than of `set`.", "start_char_idx": 0, "end_char_idx": 287, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "715a8590-3a78-4045-9369-99c0ddc7002c": {"__data__": {"id_": "715a8590-3a78-4045-9369-99c0ddc7002c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "607f2875-fb90-47a8-b104-92249c0d1fbf", "node_type": null, "metadata": {}, "hash": "029f14609614cdbff90479058a4f9e3cbd6765383e85f9092df6138bd5a90a36"}}, "hash": "55573832e92f6e4e718471d3643b2ae83e0b5d0cdd47182f26edd0f095811ce6", "text": "Mitigations\n\nVerify that type signatures are identical between inferfaces and implementations.", "start_char_idx": 0, "end_char_idx": 94, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0af66a94-210d-4d33-b54f-a4251a6b81e9": {"__data__": {"id_": "0af66a94-210d-4d33-b54f-a4251a6b81e9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9", "node_type": null, "metadata": {}, "hash": "7ed7e991b5c378837835a6519053aab10aff463dc7bd387f00beb19f0502b981"}, "3": {"node_id": "abe2d532-b2ce-4c77-9269-a8a6c68c2b28", "node_type": null, "metadata": {}, "hash": "45d173d8be600074b1ce804a551321eccc75c0af4138cd323ac3b9c0b63b8cd0"}}, "hash": "f12c64aa501dd4a465ae2dfc0c16d639b20151cab9b46fe4c0a983c0c85c94df", "text": "Example\n\nWe now walk through how to find this vulnerability in the Alice and Bob contracts in this repo.\n\nFirst, get the bytecode and the abi of the contracts:\n```\u0300bash \n$ solc --bin Alice.sol\n6060604052341561000f57600080fd5b5b6101158061001f6000396000f300606060405236156051576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c6bb436146067578063a5d5e46514608d578063e5c19b2d1460ad575b3415605b57600080fd5b5b60016000819055505b005b3415607157600080fd5b607760cd565b6040518082815260200191505060405180910390f35b3415609757600080fd5b60ab600480803590602001909190505060d3565b005b341560b757600080fd5b60cb600480803590602001909190505060de565b005b60005481565b806000819055505b50565b806000819055505b505600a165627a7a723058207d0ad6d1ce356adf9fa0284c9f887bb4b912204886b731c37c2ae5d16aef19a20029\n$ solc --abi Alice.sol\n[{\"constant\":true,\"inputs\":[],\"name\":\"val\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_val\",\"type\":\"int256\"}],\"name\":\"set_fixed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_val\",\"type\":\"int256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"}]\n\n\n$ solc --bin Bob.sol\n6060604052341561000f57600080fd5b5b6101f58061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632801617e1461004957806390b2290e14610082575b600080fd5b341561005457600080fd5b610080600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100bb565b005b341561008d57600080fd5b6100b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610142565b005b8073ffffffffffffffffffffffffffffffffffffffff166360fe47b1602a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561012a57600080fd5b6102c65a03f1151561013b57600080fd5b5050505b50565b8073ffffffffffffffffffffffffffffffffffffffff1663a5d5e465602a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156101b157600080fd5b6102c65a03f115156101c257600080fd5b5050505b505600a165627a7a72305820f8c9dcade78d92097c18627223a8583507e9331ef1e5de02640ffc2e731111320029\n$ solc --abi Bob.sol\n[{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"set_fixed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]\n```\n\nThe following commands were tested on a private blockchain\n\n```javascript\n$ get attach\n\n// this unlock the account for a limited amount of time\n// if you have an error:\n//", "start_char_idx": 0, "end_char_idx": 2777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "abe2d532-b2ce-4c77-9269-a8a6c68c2b28": {"__data__": {"id_": "abe2d532-b2ce-4c77-9269-a8a6c68c2b28", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9", "node_type": null, "metadata": {}, "hash": "7ed7e991b5c378837835a6519053aab10aff463dc7bd387f00beb19f0502b981"}, "2": {"node_id": "0af66a94-210d-4d33-b54f-a4251a6b81e9", "node_type": null, "metadata": {}, "hash": "f12c64aa501dd4a465ae2dfc0c16d639b20151cab9b46fe4c0a983c0c85c94df"}, "3": {"node_id": "1b092c9f-f071-43c0-ba16-fef0d4c5c304", "node_type": null, "metadata": {}, "hash": "f8048d7f843834d1444d4bef7ab3c72c249f5deed5c53c62e5f628fbad570312"}}, "hash": "45d173d8be600074b1ce804a551321eccc75c0af4138cd323ac3b9c0b63b8cd0", "text": "unlock the account for a limited amount of time\n// if you have an error:\n// Error: authentication needed: password or unlock\n// you can to call unlockAccount again\npersonal.unlockAccount(eth.accounts[0], \"apasswordtochange\")\n\nvar bytecodeAlice = '0x6060604052341561000f57600080fd5b5b6101158061001f6000396000f300606060405236156051576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633c6bb436146067578063a5d5e46514608d578063e5c19b2d1460ad575b3415605b57600080fd5b5b60016000819055505b005b3415607157600080fd5b607760cd565b6040518082815260200191505060405180910390f35b3415609757600080fd5b60ab600480803590602001909190505060d3565b005b341560b757600080fd5b60cb600480803590602001909190505060de565b005b60005481565b806000819055505b50565b806000819055505b505600a165627a7a723058207d0ad6d1ce356adf9fa0284c9f887bb4b912204886b731c37c2ae5d16aef19a20029'\nvar abiAlice = [{\"constant\":true,\"inputs\":[],\"name\":\"val\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_val\",\"type\":\"int256\"}],\"name\":\"set_fixed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_val\",\"type\":\"int256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"payable\":false,\"type\":\"fallback\"}]\n\nvar bytecodeBob = '0x6060604052341561000f57600080fd5b5b6101f58061001f6000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632801617e1461004957806390b2290e14610082575b600080fd5b341561005457600080fd5b610080600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506100bb565b005b341561008d57600080fd5b6100b9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610142565b005b8073ffffffffffffffffffffffffffffffffffffffff166360fe47b1602a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b151561012a57600080fd5b6102c65a03f1151561013b57600080fd5b5050505b50565b8073ffffffffffffffffffffffffffffffffffffffff1663a5d5e465602a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15156101b157600080fd5b6102c65a03f115156101c257600080fd5b5050505b505600a165627a7a72305820f8c9dcade78d92097c18627223a8583507e9331ef1e5de02640ffc2e731111320029'\nvar abiBob = [{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"name\":\"set_fixed\",\"outputs\":[],\"payable\":false,\"type\":\"function\"}]\n\nvar contractAlice = eth.contract(abiAlice); \nvar txDeployAlice = {from:eth.coinbase, data: bytecodeAlice, gas: 1000000}; \nvar contractPartialInstanceAlice =", "start_char_idx": 2716, "end_char_idx": 5515, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1b092c9f-f071-43c0-ba16-fef0d4c5c304": {"__data__": {"id_": "1b092c9f-f071-43c0-ba16-fef0d4c5c304", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "6ab9539a-673c-4798-bc21-6c8bfed24da9", "node_type": null, "metadata": {}, "hash": "7ed7e991b5c378837835a6519053aab10aff463dc7bd387f00beb19f0502b981"}, "2": {"node_id": "abe2d532-b2ce-4c77-9269-a8a6c68c2b28", "node_type": null, "metadata": {}, "hash": "45d173d8be600074b1ce804a551321eccc75c0af4138cd323ac3b9c0b63b8cd0"}}, "hash": "f8048d7f843834d1444d4bef7ab3c72c249f5deed5c53c62e5f628fbad570312", "text": "data: bytecodeAlice, gas: 1000000}; \nvar contractPartialInstanceAlice = contractAlice.new(txDeployAlice); \n\n// Wait to mine the block containing the transaction\n\nvar alice = contractAlice.at(contractPartialInstanceAlice.address);\n\nvar contractBob = eth.contract(abiBob); \nvar txDeployBob = {from:eth.coinbase, data: bytecodeBob, gas: 1000000}; \nvar contractPartialInstanceBob = contractBob.new(txDeployBob); \n\n// Wait to mine the block containing the transaction\n\nvar bob = contractBob.at(contractPartialInstanceBob.address);\n\n// From now, wait for each transaction to be mined before calling\n// the others transactions\n\n// print the default value of val: 0\nalice.val() \n\n// call bob.set, as the interface is wrong, it will call\n// the fallback function of alice\nbob.set(alice.address, {from: eth.accounts[0]} )\n// print val: 1\nalice.val()\n\n// call the fixed version of the interface\nbob.set_fixed(alice.address, {from: eth.accounts[0]} )\n// print val: 42\nalice.val()\n```", "start_char_idx": 5506, "end_char_idx": 6477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2191e6f3-d587-4995-bd0c-3cda7c21857c": {"__data__": {"id_": "2191e6f3-d587-4995-bd0c-3cda7c21857c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "594936c1-f49a-40c3-95a0-ef8ea505b66b", "node_type": null, "metadata": {}, "hash": "9adbc3389857a3d870d2f03c15c562c27a0ccca717e377fe7bd5026dd5d21372"}}, "hash": "69076cb34d5844f53b25da9adbc2ef5c2af4c811de3d0beebf7246376387c948", "text": "pragma solidity ^0.4.15;\n\ncontract Alice { \n    int public val;\n\n    function set(int new_val){\n        val = new_val;\n    }\n\n    function set_fixed(int new_val){\n        val = new_val;\n    }\n\n    function(){\n        val = 1;\n    }\n}", "start_char_idx": 0, "end_char_idx": 233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e61253fd-6238-420e-b952-76be6077809e": {"__data__": {"id_": "e61253fd-6238-420e-b952-76be6077809e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "405fb025-f043-4450-ae53-a5b49de2cd5c", "node_type": null, "metadata": {}, "hash": "d811768ba9a68a02699ae6502e84f2fc63af01a63670f5dedb9899433c5886c1"}}, "hash": "ad800442533642068a0d89cad7d7241abca6f4aa0bfeb8d4e727d56c242b915d", "text": "pragma solidity ^0.4.15;\n\ncontract Alice { \n    function set(uint); \n    function set_fixed(int); \n}\n\ncontract Bob { \n    function set(Alice c){ \n        c.set(42); \n    }\n\n    function set_fixed(Alice c){ \n        c.set_fixed(42); \n    } \n}", "start_char_idx": 0, "end_char_idx": 241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5f07f229-156a-4e83-991a-5fa86e5b1158": {"__data__": {"id_": "5f07f229-156a-4e83-991a-5fa86e5b1158", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c1413f8c-9c74-4739-889f-fa3df74ceeb8", "node_type": null, "metadata": {}, "hash": "fb52dcbc78f96f2246be8c1b00edd3d703f0ace8a822a6e07a8c62ee116a7e4f"}}, "hash": "fc24d7a0191a4e7e6ca54c6d432c3be903a4ddb86d2b7c16f435e7e449072fac", "text": "Integer Overflow\n\nIt is possible to cause `add` and `sub` to overflow (or underflow) on any type of integer in Solidity.", "start_char_idx": 0, "end_char_idx": 120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3eeceb73-122d-4f9e-889d-5f9b0f678175": {"__data__": {"id_": "3eeceb73-122d-4f9e-889d-5f9b0f678175", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f85bb871-2196-4226-8833-b02bee265739", "node_type": null, "metadata": {}, "hash": "0c616747dfa0e1b882ab8c6d698cef97bedd5c4e9b6fdbefddf554c9314698bd"}}, "hash": "60c28dff62c1e153c37f39eef7df46cead49d3b909205724b5b0bd02942808ce", "text": "Attack Scenarios\n\n- Attacker has 5 of some ERC20 token. They spend 6, but because the token doesn't check for underflows,\nthey wind up with 2^256 tokens.\n\n- A contract contains a dynamic array and an unsafe `pop` method. An attacker can underflow the length of\nthe array and alter other variables in the contract.", "start_char_idx": 0, "end_char_idx": 313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4f2d5f5d-f74b-473d-ad22-c8192807cb5b": {"__data__": {"id_": "4f2d5f5d-f74b-473d-ad22-c8192807cb5b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aeeb5c6d-2e50-425a-b1af-564751177234", "node_type": null, "metadata": {}, "hash": "34893b35e2095403c52dc873ecad92908eb03fac0c858640ec5ca2b36f1d2dae"}}, "hash": "0469113ecdd9eeac15cee23e96f27f258435976b177ce047b6dd6752b1eddd12", "text": "Mitigations\n\n- Use openZeppelin's safeMath library\n- Validate all arithmetic", "start_char_idx": 0, "end_char_idx": 76, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f05234e2-b393-4ac3-ae2b-1ab17f0ba849": {"__data__": {"id_": "f05234e2-b393-4ac3-ae2b-1ab17f0ba849", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "1dab281e-e2ad-401a-9169-a524ee42b564", "node_type": null, "metadata": {}, "hash": "7adf1a14a96175895b9e1e32106806051b381c486142e24654dfb03e47dedc97"}}, "hash": "d177cbf071094af7de146f517c7f078114ba0242f112736882e6d5c18a30192c", "text": "Examples\n\n- In integer_overflow_1, we give both unsafe and safe version of\nthe `add` operation.\n\n- A submission to the Underhanded Solidity Coding Contest that explots the unsafe dynamic array bug outlined above", "start_char_idx": 0, "end_char_idx": 211, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "556879ef-ffa0-4077-9222-fcade97fc337": {"__data__": {"id_": "556879ef-ffa0-4077-9222-fcade97fc337", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "7d4045db-39fb-4736-ac5c-666ba39d14ec", "node_type": null, "metadata": {}, "hash": "f056194a801d543e3e898c513c869b33ac7f66fe6f5f94c2f5daf67754434925"}}, "hash": "1958f35f5f42575ceefd66edadf29fad43140332bff1d57573a41cd4d12770d7", "text": "pragma solidity ^0.4.15;\n\ncontract Overflow {\n    uint private sellerBalance=0;\n    \n    function add(uint value) returns (bool){\n        sellerBalance += value; // possible overflow\n\n        // possible auditor assert\n        // assert(sellerBalance >= value); \n    } \n\n    function safe_add(uint value) returns (bool){\n        require(value + sellerBalance >= sellerBalance);\n        sellerBalance += value; \n    } \n}", "start_char_idx": 0, "end_char_idx": 419, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fab431fd-38a2-466b-8378-5c9cfdc1edfc": {"__data__": {"id_": "fab431fd-38a2-466b-8378-5c9cfdc1edfc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "8f5a5a42-2a35-49db-b4ee-9ecfeddfe241", "node_type": null, "metadata": {}, "hash": "5f4b03087c1ac51364aa6099cb9acd82d1225d3325f8a0eb143514a9f5e8b559"}}, "hash": "b50a6e367944f4a18c9e957f62ca12c442cc61682ed86f921fc0c520c523f612", "text": "Race Condition\nThere is a gap between the creation of a transaction and the moment it is accepted in the blockchain.\nTherefore, an attacker can take advantage of this gap to put a contract in a state that advantages them.", "start_char_idx": 0, "end_char_idx": 221, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8bea883f-d065-419c-94a5-002f6509249e": {"__data__": {"id_": "8bea883f-d065-419c-94a5-002f6509249e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "37b4789c-46db-4367-88a2-b16ea858f8b2", "node_type": null, "metadata": {}, "hash": "c29def80712027be11dea5bed39cda1f69563b4cc279e5c9f8cebbc25fc4c50e"}}, "hash": "6d768dff40a50445ba1f2695eb0d7d136c8fcbd6a886738944ad5733a2978ee1", "text": "Attack Scenario\n\n- Bob creates `RaceCondition(100, token)`. Alice trusts `RaceCondition` with all its tokens. Alice calls `buy(150)`\nBob sees the transaction, and calls `changePrice(300)`. The transaction of Bob is mined before the one of Alice and\nas a result, Bob received 300 tokens.\n\n- The ERC20 standard's `approve` and `transferFrom` functions are vulnerable to a race condition. Suppose Alice has\napproved Bob to spend 100 tokens on her behalf. She then decides to only approve him for 50 tokens and sends\na second `approve` transaction. However, Bob sees that he's about to be downgraded and quickly submits a\n`transferFrom` for the original 100 tokens he was approved for. If this transaction gets mined before Alice's\nsecond `approve`, Bob will be able to spend 150 of Alice's tokens.", "start_char_idx": 0, "end_char_idx": 794, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2af314de-b4e9-4f51-bfd0-4730a83c0047": {"__data__": {"id_": "2af314de-b4e9-4f51-bfd0-4730a83c0047", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "511867cd-1057-4ae3-9ef5-146fd068557b", "node_type": null, "metadata": {}, "hash": "9ef2416951be2085b0cd242730601da83ebe4900410c7bc46cd423c0024135ec"}}, "hash": "9ca5efc49569d76ec064b76b2a47bf445ddbc666842f185afc4515a55ac051ad", "text": "Mitigations\n\n- For the ERC20 bug, insist that Alice only be able to `approve` Bob when he is approved for 0 tokens.\n- Keep in mind that all transactions may be front-run", "start_char_idx": 0, "end_char_idx": 169, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "995428fd-b614-4d59-ba2e-0b6b767a0afe": {"__data__": {"id_": "995428fd-b614-4d59-ba2e-0b6b767a0afe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "64227685-209a-400b-b7b3-6df52f6f3550", "node_type": null, "metadata": {}, "hash": "5e446e9312cfad8e3aaa47bc4bfceff146cb9cb70467dfa7f76382982750cb52"}}, "hash": "adcdd206a1ee790847a1776e27690507dd246a9ea07468bd63a64804e53d3171", "text": "Examples\n- Race condition outlined in the first bullet point above", "start_char_idx": 0, "end_char_idx": 66, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "604d7849-86ce-48a1-9249-0a9076a5d5df": {"__data__": {"id_": "604d7849-86ce-48a1-9249-0a9076a5d5df", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "76df151d-43b8-4c95-bcfc-85c58b126042", "node_type": null, "metadata": {}, "hash": "e5766369b7055dfcd313457f1497d0f06ad88f89d6fe13c4a2a8e1d0f5c099b2"}}, "hash": "5ced05b69a21e0f551124befb6ad212f8d5b37731a59b12c1d6727c22fde53a8", "text": "Unchecked External Call\n\nCertain Solidity operations known as \"external calls\", require the developer to manually ensure that the operation succeeded. This is in contrast to operations which throw an exception on failure. If an external call fails, but is not checked, the contract will continue execution as if the call succeeded. This will likely result in buggy and potentially exploitable behavior from the contract.", "start_char_idx": 0, "end_char_idx": 420, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d7e973b5-f870-4d6f-b5b1-23f782648907": {"__data__": {"id_": "d7e973b5-f870-4d6f-b5b1-23f782648907", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a2be9667-6006-4319-a607-82e3edb0cfb1", "node_type": null, "metadata": {}, "hash": "eb4e4505e48da1a7816a90f861dcdb7524c80c098afcb901d981a422a6d9a290"}}, "hash": "0aad43b02bf36aedbfff9175f480cef7e9fca40e653cb94bb5961804f28ac2e2", "text": "Attack\n\n- A contract uses an unchecked `address.send()` external call to transfer Ether.\n- If it transfers Ether to an attacker contract, the attacker contract can reliably cause the external call to fail, for example, with a fallback function which intentionally runs out of gas.\n- The consequences of this external call failing will be contract specific.\n\t- In the case of the King of the Ether contract, this resulted in accidental loss of Ether for some contract users, due to refunds not being sent.", "start_char_idx": 0, "end_char_idx": 504, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "93691cbd-e45e-4381-b54e-30d8719d34e8": {"__data__": {"id_": "93691cbd-e45e-4381-b54e-30d8719d34e8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "d004380e-3a9b-45dc-96e8-1b5461aa3f84", "node_type": null, "metadata": {}, "hash": "cd74939f4329585a1ae391a7bd151048a15b7f4b06f32eb3101acaa0242acbe1"}}, "hash": "1849acaed4e88ab2d66ba39ed2a83c609a5cca8b74cd1d717af6c7864fccab32", "text": "Mitigation\n\n- Manually perform validation when making external calls\n- Use `address.transfer()`", "start_char_idx": 0, "end_char_idx": 95, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b7796b8b-8c26-4310-8b15-262c647740c2": {"__data__": {"id_": "b7796b8b-8c26-4310-8b15-262c647740c2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "727c5382-6db6-482d-9c91-271f42e435d9", "node_type": null, "metadata": {}, "hash": "3446cb4c3d8524cff184469fc382f18a9b99edafefc83a4d8ffb3d59baf3c0a4"}}, "hash": "92ef81a169f177e4e3746493315a96dafcdeee0bcc43730e10cf25dead78f685", "text": "Example\n\n- King of the Ether (line numbers:\n\t100,\n\t107,\n\t120,\n\t161)", "start_char_idx": 0, "end_char_idx": 67, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b4086549-d5e6-412d-839c-573688292734": {"__data__": {"id_": "b4086549-d5e6-412d-839c-573688292734", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "61e29c05-7153-493f-9b7b-f63997680bc8", "node_type": null, "metadata": {}, "hash": "9907beac009a02fc3418d4d6a624e4520386f785e01af540c355ecf6a94a09f0"}}, "hash": "c7402077c412381957dea62c8d437c6b291653a60954240dc352a0e8a252b2bb", "text": "References\n\n- http://solidity.readthedocs.io/en/develop/security-considerations.html\n- http://solidity.readthedocs.io/en/develop/types.html#members-of-addresses\n- https://github.com/ConsenSys/smart-contract-best-practices#handle-errors-in-external-calls\n- https://vessenes.com/ethereum-griefing-wallets-send-w-throw-considered-harmful/", "start_char_idx": 0, "end_char_idx": 335, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bda1cc9f-715f-4f2a-848f-6c10b46e991f": {"__data__": {"id_": "bda1cc9f-715f-4f2a-848f-6c10b46e991f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41", "node_type": null, "metadata": {}, "hash": "e4d92e16068a6094d432a6cbfd8abe1fe291c58f0eac941d559d98984cee7b9a"}, "3": {"node_id": "9484d082-d873-4700-9416-232bdf45df33", "node_type": null, "metadata": {}, "hash": "155cf7f8456cb7fba8940ea3eedf4ac6d5c4159e8feba9d93e81deefde1b88f1"}}, "hash": "4baa6d13a340b5c98b2025a3becc9db2db9136789857b792a2bb3f8924805394", "text": "// A chain-game contract that maintains a 'throne' which agents may pay to rule.\n// See www.kingoftheether.com & https://github.com/kieranelby/KingOfTheEtherThrone .\n// (c) Kieran Elby 2016. All rights reserved.\n// v0.4.0.\n// Inspired by ethereumpyramid.com and the (now-gone?) \"magnificent bitcoin gem\".\n\n// This contract lives on the blockchain at 0xb336a86e2feb1e87a328fcb7dd4d04de3df254d0\n// and was compiled (using optimization) with:\n// Solidity version: 0.2.1-fad2d4df/.-Emscripten/clang/int linked to libethereum\n\n// For future versions it would be nice to ...\n// TODO - enforce time-limit on reign (can contracts do that without external action)?\n// TODO - add a random reset?\n// TODO - add bitcoin bridge so agents can pay in bitcoin?\n// TODO - maybe allow different return payment address?\npragma solidity ^0.4.19;\n\ncontract KingOfTheEtherThrone {\n\n    struct Monarch {\n        // Address to which their compensation will be sent.\n        address etherAddress;\n        // A name by which they wish to be known.\n        // NB: Unfortunately \"string\" seems to expose some bugs in web3.\n        string name;\n        // How much did they pay to become monarch?\n        uint claimPrice;\n        // When did their rule start (based on block.timestamp)?\n        uint coronationTimestamp;\n    }\n\n    // The wizard is the hidden power behind the throne; they\n    // occupy the throne during gaps in succession and collect fees.\n    address wizardAddress;\n\n    // Used to ensure only the wizard can do some things.\n    modifier onlywizard { if (msg.sender == wizardAddress) _; }\n\n    // How much must the first monarch pay?\n    uint constant startingClaimPrice = 100 finney;\n\n    // The next claimPrice is calculated from the previous claimFee\n    // by multiplying by claimFeeAdjustNum and dividing by claimFeeAdjustDen -\n    // for example, num=3 and den=2 would cause a 50% increase.\n    uint constant claimPriceAdjustNum = 3;\n    uint constant claimPriceAdjustDen = 2;\n\n    // How much of each claimFee goes to the wizard (expressed as a fraction)?\n    // e.g. num=1 and den=100 would deduct 1% for the wizard, leaving 99% as\n    // the compensation fee for the usurped monarch.\n    uint constant wizardCommissionFractionNum = 1;\n    uint constant wizardCommissionFractionDen = 100;\n\n    // How much must an agent pay now to become the monarch?\n    uint public currentClaimPrice;\n\n    // The King (or Queen) of the Ether.\n    Monarch public currentMonarch;\n\n    // Earliest-first list of previous throne holders.\n    Monarch[] public pastMonarchs;\n\n    // Create a new throne, with the creator as wizard and first ruler.\n    // Sets up some hopefully sensible defaults.\n    function KingOfTheEtherThrone() {\n        wizardAddress = msg.sender;\n        currentClaimPrice = startingClaimPrice;\n        currentMonarch = Monarch(\n            wizardAddress,\n            \"[Vacant]\",\n            0,\n     ", "start_char_idx": 0, "end_char_idx": 2902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9484d082-d873-4700-9416-232bdf45df33": {"__data__": {"id_": "9484d082-d873-4700-9416-232bdf45df33", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41", "node_type": null, "metadata": {}, "hash": "e4d92e16068a6094d432a6cbfd8abe1fe291c58f0eac941d559d98984cee7b9a"}, "2": {"node_id": "bda1cc9f-715f-4f2a-848f-6c10b46e991f", "node_type": null, "metadata": {}, "hash": "4baa6d13a340b5c98b2025a3becc9db2db9136789857b792a2bb3f8924805394"}, "3": {"node_id": "a03c8a44-1bae-4161-b529-0a782ae12fe6", "node_type": null, "metadata": {}, "hash": "022d0769aa5683a8f8ceaa12b46ed1cff129389969190f6d45eee9657241cc7a"}}, "hash": "155cf7f8456cb7fba8940ea3eedf4ac6d5c4159e8feba9d93e81deefde1b88f1", "text": "           0,\n            block.timestamp\n        );\n    }\n\n    function numberOfMonarchs() constant returns (uint n) {\n        return pastMonarchs.length;\n    }\n\n    // Fired when the throne is claimed.\n    // In theory can be used to help build a front-end.\n    event ThroneClaimed(\n        address usurperEtherAddress,\n        string usurperName,\n        uint newClaimPrice\n    );\n\n    // Fallback function - simple transactions trigger this.\n    // Assume the message data is their desired name.\n    function() {\n        claimThrone(string(msg.data));\n    }\n\n    // Claim the throne for the given name by paying the currentClaimFee.\n    function claimThrone(string name) {\n\n        uint valuePaid = msg.value;\n\n        // If they paid too little, reject claim and refund their money.\n        if (valuePaid < currentClaimPrice) {\n            msg.sender.send(valuePaid);\n            return;\n        }\n\n        // If they paid too much, continue with claim but refund the excess.\n        if (valuePaid > currentClaimPrice) {\n            uint excessPaid = valuePaid - currentClaimPrice;\n            msg.sender.send(excessPaid);\n            valuePaid = valuePaid - excessPaid;\n        }\n\n        // The claim price payment goes to the current monarch as compensation\n        // (with a commission held back for the wizard). We let the wizard's\n        // payments accumulate to avoid wasting gas sending small fees.\n\n        uint wizardCommission = (valuePaid * wizardCommissionFractionNum) / wizardCommissionFractionDen;\n\n        uint compensation = valuePaid - wizardCommission;\n\n        if (currentMonarch.etherAddress != wizardAddress) {\n            currentMonarch.etherAddress.send(compensation);\n        } else {\n            // When the throne is vacant, the fee accumulates for the wizard.\n        }\n\n        // Usurp the current monarch, replacing them with the new one.\n        pastMonarchs.push(currentMonarch);\n        currentMonarch = Monarch(\n            msg.sender,\n            name,\n            valuePaid,\n            block.timestamp\n        );\n\n        // Increase the claim fee for next time.\n        // Stop number of trailing decimals getting silly - we round it a bit.\n        uint rawNewClaimPrice = currentClaimPrice * claimPriceAdjustNum / claimPriceAdjustDen;\n        if (rawNewClaimPrice < 10 finney) {\n            currentClaimPrice = rawNewClaimPrice;\n        } else if (rawNewClaimPrice < 100 finney) {\n            currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100", "start_char_idx": 2900, "end_char_idx": 5396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a03c8a44-1bae-4161-b529-0a782ae12fe6": {"__data__": {"id_": "a03c8a44-1bae-4161-b529-0a782ae12fe6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4a36f55f-44cc-4b04-b90c-e8e6713b5b41", "node_type": null, "metadata": {}, "hash": "e4d92e16068a6094d432a6cbfd8abe1fe291c58f0eac941d559d98984cee7b9a"}, "2": {"node_id": "9484d082-d873-4700-9416-232bdf45df33", "node_type": null, "metadata": {}, "hash": "155cf7f8456cb7fba8940ea3eedf4ac6d5c4159e8feba9d93e81deefde1b88f1"}}, "hash": "022d0769aa5683a8f8ceaa12b46ed1cff129389969190f6d45eee9657241cc7a", "text": "    currentClaimPrice = 100 szabo * (rawNewClaimPrice / 100 szabo);\n        } else if (rawNewClaimPrice < 1 ether) {\n            currentClaimPrice = 1 finney * (rawNewClaimPrice / 1 finney);\n        } else if (rawNewClaimPrice < 10 ether) {\n            currentClaimPrice = 10 finney * (rawNewClaimPrice / 10 finney);\n        } else if (rawNewClaimPrice < 100 ether) {\n            currentClaimPrice = 100 finney * (rawNewClaimPrice / 100 finney);\n        } else if (rawNewClaimPrice < 1000 ether) {\n            currentClaimPrice = 1 ether * (rawNewClaimPrice / 1 ether);\n        } else if (rawNewClaimPrice < 10000 ether) {\n            currentClaimPrice = 10 ether * (rawNewClaimPrice / 10 ether);\n        } else {\n            currentClaimPrice = rawNewClaimPrice;\n        }\n\n        // Hail the new monarch!\n        ThroneClaimed(currentMonarch.etherAddress, currentMonarch.name, currentClaimPrice);\n    }\n\n    // Used only by the wizard to collect his commission.\n    function sweepCommission(uint amount) onlywizard {\n        wizardAddress.send(amount);\n    }\n\n    // Used only by the wizard to collect his commission.\n    function transferOwnership(address newOwner) onlywizard {\n        wizardAddress = newOwner;\n    }\n\n}", "start_char_idx": 5340, "end_char_idx": 6565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f65e04b4-3927-45c1-bdf3-660ca38d5a61": {"__data__": {"id_": "f65e04b4-3927-45c1-bdf3-660ca38d5a61", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c90a3b25-d3f7-49d5-a84b-793c8eccebd1", "node_type": null, "metadata": {}, "hash": "82633efb7416a75a92010028a60c33e47c39be6ef80ecbb0441e798d43688fa6"}}, "hash": "91303762067fa91b35b8a3f67db8d8322d6c0cc592bc824551472cdc39639acd", "text": "Variable Shadowing\nVariable shadowing occurs when a variable declared within a certain scope (decision block, method, or inner class)\nhas the same name as a variable declared in an outer scope.", "start_char_idx": 0, "end_char_idx": 193, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "06232635-57a4-401c-9a7a-1ef13765036a": {"__data__": {"id_": "06232635-57a4-401c-9a7a-1ef13765036a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b4d21c1d-0863-4441-9aac-784a686be526", "node_type": null, "metadata": {}, "hash": "aa99faf5ef253c011342d5f95deacfb21758a462bb832d8071ea16d8dcc889ba"}}, "hash": "2c7bde3dd9d980f4ef50ffe85c9c59fef5a8165366cefbf4a946d67f3e2f0a03", "text": "Attack\nThis depends a lot on the code of the contract itself. For instance, in the this example, variable shadowing prevents the owner of contract `C` from performing self destruct", "start_char_idx": 0, "end_char_idx": 180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fdd4352e-ccc6-43b3-9615-d2434a3c16b7": {"__data__": {"id_": "fdd4352e-ccc6-43b3-9615-d2434a3c16b7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b83b2989-74f1-4138-94a6-12be33c99b8f", "node_type": null, "metadata": {}, "hash": "6fd28bdfd523091d73d69c998ae76e6a467187dc5de6910858410e9746327787"}}, "hash": "4a939a05dde3b5ff07f61f11db6e239cb4d8c0ecf9252221b30c6c1c8e4835a0", "text": "Mitigation\nThe solidity compiler has some checks to emit warnings when \nit detects this kind of issue, but it has known examples where \nit fails.", "start_char_idx": 0, "end_char_idx": 145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f388729d-f424-4462-a4f8-9456e55511bd": {"__data__": {"id_": "f388729d-f424-4462-a4f8-9456e55511bd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "dc6b7566-0c71-4c3f-b57b-cf1031354647", "node_type": null, "metadata": {}, "hash": "4481cbe0399c00dc62de910a09b168bf0c229e0225ef61df8a2ccb4669fd161e"}}, "hash": "02b0d1746c5d085de08ddb77b20fb52b957a9fd5bcab59fc6fcd2aad5c7772c4", "text": "contract Suicidal {\n  address owner;\n  function suicide() public returns (address) {\n    require(owner == msg.sender);\n    selfdestruct(owner);\n  }\n}\ncontract C is Suicidal {\n  address owner;\n  function C() {\n    owner = msg.sender;\n  }\n}", "start_char_idx": 0, "end_char_idx": 238, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"323ded51-deab-4dbc-aa2e-c2b7044752e9": {"node_ids": ["75f14b08-eef7-4de7-97ad-891f1f7a10cc"], "metadata": {}}, "0bb4e7da-9ffd-45fe-abe9-65737f495b90": {"node_ids": ["84f65174-9b0f-4bee-8c82-52e56c90f8c3", "2bce9355-4b40-43a7-9173-16a3fabfe3ad", "540d10c5-e065-4bf0-a7e3-fb50b2b5f8fe"], "metadata": {}}, "bb97eb83-b984-4816-b466-b317844bac47": {"node_ids": ["476c279e-26bf-44d1-b28e-33ccd1d4b460"], "metadata": {}}, "ba3c78e6-b496-4c43-b814-87bed98c6b8e": {"node_ids": ["15eb41ef-6101-41a5-8f68-3d6921f6a975"], "metadata": {}}, "0f35651c-6e44-49c3-9840-abbeedf8ef9d": {"node_ids": ["855641c8-ab01-43a7-b664-4f404a63b327"], "metadata": {}}, "77375ba8-f242-416e-891e-ffc340ef306c": {"node_ids": ["3615bd98-4326-414e-83e1-65726f89c278"], "metadata": {}}, "e6831b85-c69f-458e-a7c5-2f9dd55ff3a5": {"node_ids": ["41bbb5dd-9e8f-40c6-b75a-afe1ad694bcc"], "metadata": {}}, "47773f87-932c-4a5f-9329-85c79573aec0": {"node_ids": ["b24d522a-18f1-4661-b57a-23c685834436"], "metadata": {}}, "e1b4e2b8-db09-4faf-93a8-6ef2114100e9": {"node_ids": ["3cc9942d-4d24-43da-a024-b3530c28e2c9"], "metadata": {}}, "5dc5a74c-5b7d-45b0-827a-d6203f8bf2fb": {"node_ids": ["9e7cc5d3-d1e0-4dfe-a43b-036e6d1cbd7c"], "metadata": {}}, "991e4a5c-1a90-453b-a344-557650ecddcf": {"node_ids": ["a18306fd-2d50-424c-80e0-b920372dbd04"], "metadata": {}}, "6c85ba42-29a0-4558-a896-9d8defc3f419": {"node_ids": ["48df718d-be0d-4d04-be1b-40962a2c2853"], "metadata": {}}, "83d7c78c-fe83-4d9f-8878-d3d169542d20": {"node_ids": ["647f9cf1-4b82-473e-ba76-3e0c6756cf48"], "metadata": {}}, "1b0bfedc-41e1-4692-9d69-b2aed66895ab": {"node_ids": ["a4f9f89b-bbfc-479a-91e9-ede46a65fe1c"], "metadata": {}}, "1aad107c-7c7e-45b2-8ef0-171962a53df3": {"node_ids": ["a6634de3-e4d1-442e-a211-dcc0271f8e3e"], "metadata": {}}, "19777680-d5e4-46f3-bb17-fc057692ae11": {"node_ids": ["50a1ac41-d8ed-4210-9701-86bc4bc7c60c", "6ed78359-741b-4ae4-9534-ee7c3fc6804c", "4f233ecc-607d-44dc-a1eb-d43189fd6b8d"], "metadata": {}}, "476aeb80-2f80-4329-aaf0-16cda12105fb": {"node_ids": ["d9e589cc-4f70-45f2-87c6-af4cd9cf896e"], "metadata": {}}, "9e27a9d5-7dfa-4ab7-afbd-eaab5cb91eb1": {"node_ids": ["a173ff99-1093-4a20-9525-d2942517d524"], "metadata": {}}, "607f2875-fb90-47a8-b104-92249c0d1fbf": {"node_ids": ["715a8590-3a78-4045-9369-99c0ddc7002c"], "metadata": {}}, "6ab9539a-673c-4798-bc21-6c8bfed24da9": {"node_ids": ["0af66a94-210d-4d33-b54f-a4251a6b81e9", "abe2d532-b2ce-4c77-9269-a8a6c68c2b28", "1b092c9f-f071-43c0-ba16-fef0d4c5c304"], "metadata": {}}, "594936c1-f49a-40c3-95a0-ef8ea505b66b": {"node_ids": ["2191e6f3-d587-4995-bd0c-3cda7c21857c"], "metadata": {}}, "405fb025-f043-4450-ae53-a5b49de2cd5c": {"node_ids": ["e61253fd-6238-420e-b952-76be6077809e"], "metadata": {}}, "c1413f8c-9c74-4739-889f-fa3df74ceeb8": {"node_ids": ["5f07f229-156a-4e83-991a-5fa86e5b1158"], "metadata": {}}, "f85bb871-2196-4226-8833-b02bee265739": {"node_ids": ["3eeceb73-122d-4f9e-889d-5f9b0f678175"], "metadata": {}}, "aeeb5c6d-2e50-425a-b1af-564751177234": {"node_ids": ["4f2d5f5d-f74b-473d-ad22-c8192807cb5b"], "metadata": {}}, "1dab281e-e2ad-401a-9169-a524ee42b564": {"node_ids": ["f05234e2-b393-4ac3-ae2b-1ab17f0ba849"], "metadata": {}}, "7d4045db-39fb-4736-ac5c-666ba39d14ec": {"node_ids": ["556879ef-ffa0-4077-9222-fcade97fc337"], "metadata": {}}, "8f5a5a42-2a35-49db-b4ee-9ecfeddfe241": {"node_ids": ["fab431fd-38a2-466b-8378-5c9cfdc1edfc"], "metadata": {}}, "37b4789c-46db-4367-88a2-b16ea858f8b2": {"node_ids": ["8bea883f-d065-419c-94a5-002f6509249e"], "metadata": {}}, "511867cd-1057-4ae3-9ef5-146fd068557b": {"node_ids": ["2af314de-b4e9-4f51-bfd0-4730a83c0047"], "metadata": {}}, "64227685-209a-400b-b7b3-6df52f6f3550": {"node_ids": ["995428fd-b614-4d59-ba2e-0b6b767a0afe"], "metadata": {}}, "76df151d-43b8-4c95-bcfc-85c58b126042": {"node_ids": ["604d7849-86ce-48a1-9249-0a9076a5d5df"], "metadata": {}}, "a2be9667-6006-4319-a607-82e3edb0cfb1": {"node_ids": ["d7e973b5-f870-4d6f-b5b1-23f782648907"], "metadata": {}}, "d004380e-3a9b-45dc-96e8-1b5461aa3f84": {"node_ids": ["93691cbd-e45e-4381-b54e-30d8719d34e8"], "metadata": {}}, "727c5382-6db6-482d-9c91-271f42e435d9": {"node_ids": ["b7796b8b-8c26-4310-8b15-262c647740c2"], "metadata": {}}, "61e29c05-7153-493f-9b7b-f63997680bc8": {"node_ids": ["b4086549-d5e6-412d-839c-573688292734"], "metadata": {}}, "4a36f55f-44cc-4b04-b90c-e8e6713b5b41": {"node_ids": ["bda1cc9f-715f-4f2a-848f-6c10b46e991f", "9484d082-d873-4700-9416-232bdf45df33", "a03c8a44-1bae-4161-b529-0a782ae12fe6"], "metadata": {}}, "c90a3b25-d3f7-49d5-a84b-793c8eccebd1": {"node_ids": ["f65e04b4-3927-45c1-bdf3-660ca38d5a61"], "metadata": {}}, "b4d21c1d-0863-4441-9aac-784a686be526": {"node_ids": ["06232635-57a4-401c-9a7a-1ef13765036a"], "metadata": {}}, "b83b2989-74f1-4138-94a6-12be33c99b8f": {"node_ids": ["fdd4352e-ccc6-43b3-9615-d2434a3c16b7"], "metadata": {}}, "dc6b7566-0c71-4c3f-b57b-cf1031354647": {"node_ids": ["f388729d-f424-4462-a4f8-9456e55511bd"], "metadata": {}}}}